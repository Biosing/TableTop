basePath: /
definitions:
  characters.CreateRequest:
    properties:
      age:
        type: integer
      beginning_way:
        type: string
      class:
        type: string
      description:
        type: string
      name:
        type: string
      race:
        type: string
      sex:
        type: string
    type: object
  characters.UpdateRequest:
    properties:
      age:
        type: integer
      beginning_way:
        type: string
      class:
        type: string
      description:
        type: string
      name:
        type: string
      race:
        type: string
      sex:
        type: string
    type: object
  combo_cards.CreateRequest:
    properties:
      added_number_cells:
        type: integer
      character_id:
        type: string
      damage_combo_cards:
        items:
          $ref: '#/definitions/combo_cards.DamageComboCard'
        type: array
      description:
        type: string
      name:
        type: string
      required_number_cells:
        type: integer
      special_effects:
        items:
          $ref: '#/definitions/combo_cards.SpecialEffect'
        type: array
      target_enemy_id:
        type: string
      type:
        $ref: '#/definitions/models.ComboCardType'
    type: object
  combo_cards.DamageComboCard:
    properties:
      damage:
        type: integer
      range_from:
        type: integer
      range_to:
        type: integer
      type:
        $ref: '#/definitions/models.DamageComboCardType'
    type: object
  combo_cards.SpecialEffect:
    properties:
      damage:
        type: integer
      damage_type:
        $ref: '#/definitions/models.SpecialEffectDamageType'
      description:
        type: string
      type:
        $ref: '#/definitions/models.SpecialEffectType'
    type: object
  combo_cards.UpdateRequest:
    properties:
      added_number_cells:
        type: integer
      character_id:
        type: string
      description:
        type: string
      name:
        type: string
      required_number_cells:
        type: integer
      target_enemy_id:
        type: string
      type:
        $ref: '#/definitions/models.ComboCardType'
    type: object
  damage_combo_cards.CreateRequest:
    properties:
      combo_card_id:
        type: string
      damage:
        type: integer
      range_from:
        type: integer
      range_to:
        type: integer
      type:
        $ref: '#/definitions/models.DamageComboCardType'
    type: object
  damage_combo_cards.UpdateRequest:
    properties:
      combo_card_id:
        type: string
      damage:
        type: integer
      range_from:
        type: integer
      range_to:
        type: integer
      type:
        $ref: '#/definitions/models.DamageComboCardType'
    type: object
  enemies.CreateRequest:
    properties:
      class:
        example: Warrior
        type: string
      defense:
        example: 2
        type: integer
      description:
        example: A small but fierce warrior
        type: string
      enemy_moves:
        items:
          $ref: '#/definitions/enemies.EnemyMoves'
        type: array
      experience:
        example: 10
        type: integer
      hp:
        example: 100
        type: integer
      level:
        example: 1
        type: integer
      name:
        example: Goblin
        type: string
      quantity_deck:
        example: 2
        type: integer
    type: object
  enemies.EnemyMoves:
    properties:
      description:
        example: Close attack
        type: string
      range_from:
        example: 1
        type: integer
      range_to:
        example: 10
        type: integer
    type: object
  enemies.UpdateRequest:
    properties:
      class:
        type: string
      defense:
        type: integer
      description:
        type: string
      experience:
        type: integer
      hp:
        type: integer
      level:
        type: integer
      name:
        type: string
      quantity_deck:
        type: integer
    type: object
  enemy_moves.CreateRequest:
    properties:
      description:
        example: Close attack
        type: string
      range_from:
        example: 1
        type: integer
      range_to:
        example: 10
        type: integer
    type: object
  enemy_moves.UpdateRequest:
    properties:
      description:
        type: string
      range_from:
        type: integer
      range_to:
        type: integer
    type: object
  locations.CreateRequest:
    properties:
      danger_level:
        type: integer
      description:
        type: string
      level:
        type: integer
      monsters_count:
        type: integer
      name:
        type: string
    type: object
  locations.UpdateRequest:
    properties:
      danger_level:
        type: integer
      description:
        type: string
      level:
        type: integer
      monsters_count:
        type: integer
      name:
        type: string
    type: object
  models.Character:
    properties:
      age:
        type: integer
      beginning_way:
        type: string
      class:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      race:
        type: string
      sex:
        type: string
    type: object
  models.ComboCard:
    properties:
      added_number_cells:
        type: integer
      character_id:
        type: string
      damage_combo_cards:
        items:
          $ref: '#/definitions/models.DamageComboCard'
        type: array
      description:
        type: string
      id:
        type: string
      name:
        type: string
      required_number_cells:
        type: integer
      special_effects:
        items:
          $ref: '#/definitions/models.SpecialEffect'
        type: array
      target_enemy_id:
        type: string
      type:
        $ref: '#/definitions/models.ComboCardType'
    type: object
  models.ComboCardType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Flex
    - CombatSkill
    - Ability
  models.DamageComboCard:
    properties:
      combo_card_id:
        type: string
      damage:
        type: integer
      id:
        type: string
      range_from:
        type: integer
      range_to:
        type: integer
      type:
        $ref: '#/definitions/models.DamageComboCardType'
    type: object
  models.DamageComboCardType:
    enum:
    - 0
    type: integer
    x-enum-varnames:
    - PhysicalDamage
  models.Enemy:
    properties:
      class:
        example: Warrior
        type: string
      defense:
        example: 2
        type: integer
      description:
        example: A small but fierce warrior
        type: string
      enemy_moves:
        items:
          $ref: '#/definitions/models.EnemyMove'
        type: array
      experience:
        example: 10
        type: integer
      hp:
        example: 100
        type: integer
      id:
        type: string
      level:
        example: 1
        type: integer
      name:
        example: Goblin
        type: string
      quantity_deck:
        example: 2
        type: integer
    type: object
  models.EnemyMove:
    properties:
      description:
        example: Slash attack
        type: string
      enemy_id:
        type: string
      id:
        type: string
      range_from:
        example: 1
        type: integer
      range_to:
        example: 3
        type: integer
    type: object
  models.Location:
    properties:
      danger_level:
        type: integer
      description:
        type: string
      id:
        type: string
      level:
        type: integer
      monsters_count:
        type: integer
      name:
        type: string
    type: object
  models.SpecialEffect:
    properties:
      combo_card_id:
        type: string
      damage:
        type: integer
      damage_type:
        $ref: '#/definitions/models.SpecialEffectDamageType'
      description:
        type: string
      id:
        type: string
      type:
        $ref: '#/definitions/models.SpecialEffectType'
    type: object
  models.SpecialEffectDamageType:
    enum:
    - 0
    type: integer
    x-enum-varnames:
    - EffectOnly
  models.SpecialEffectType:
    enum:
    - 0
    type: integer
    x-enum-varnames:
    - Variable
  models.Weapon:
    properties:
      character_id:
        type: string
      count_cards:
        type: integer
      defense:
        type: integer
      id:
        type: string
      name:
        type: string
      weapon_combo:
        items:
          $ref: '#/definitions/models.WeaponCombo'
        type: array
    type: object
  models.WeaponCombo:
    properties:
      count:
        type: integer
      id:
        type: string
      order:
        type: integer
      type:
        $ref: '#/definitions/models.WeaponComboType'
      weapon_id:
        type: string
    type: object
  models.WeaponComboType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - FlexSlot
    - CombatSkillSlot
    - AbilitySlot
  special_effects.CreateRequest:
    properties:
      combo_card_id:
        type: string
      damage:
        type: integer
      damage_type:
        $ref: '#/definitions/models.SpecialEffectDamageType'
      description:
        type: string
      type:
        $ref: '#/definitions/models.SpecialEffectType'
    type: object
  special_effects.UpdateRequest:
    properties:
      combo_card_id:
        type: string
      damage:
        type: integer
      damage_type:
        $ref: '#/definitions/models.SpecialEffectDamageType'
      description:
        type: string
      type:
        $ref: '#/definitions/models.SpecialEffectType'
    type: object
  weapon_combos.CreateRequest:
    properties:
      count:
        type: integer
      order:
        type: integer
      type:
        $ref: '#/definitions/models.WeaponComboType'
      weapon_id:
        type: string
    type: object
  weapon_combos.UpdateRequest:
    properties:
      count:
        type: integer
      order:
        type: integer
      type:
        $ref: '#/definitions/models.WeaponComboType'
      weapon_id:
        type: string
    type: object
  weapons.CreateRequest:
    properties:
      character_id:
        type: string
      count_cards:
        type: integer
      defense:
        type: integer
      name:
        type: string
      weapon_combo:
        items:
          $ref: '#/definitions/weapons.WeaponCombo'
        type: array
    type: object
  weapons.UpdateRequest:
    properties:
      character_id:
        type: string
      count_cards:
        type: integer
      defense:
        type: integer
      name:
        type: string
    type: object
  weapons.WeaponCombo:
    properties:
      count:
        type: integer
      order:
        type: integer
      type:
        $ref: '#/definitions/models.WeaponComboType'
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for a table top game.
  title: Table Top API
  version: "1.0"
paths:
  /characters:
    get:
      description: List all characters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Character'
            type: array
      summary: List all characters
      tags:
      - Characters
    post:
      consumes:
      - application/json
      description: Create a new character
      parameters:
      - description: Character
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/characters.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Character'
      summary: Create a new character
      tags:
      - Characters
  /characters/{id}:
    delete:
      description: Delete a character by ID
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a character by ID
      tags:
      - Characters
    get:
      description: Get a character by ID
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Character'
      summary: Get a character by ID
      tags:
      - Characters
    put:
      consumes:
      - application/json
      description: Update a character
      parameters:
      - description: Enemy ID
        in: path
        name: id
        required: true
        type: string
      - description: Character
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/characters.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Character'
      summary: Update a character
      tags:
      - Characters
  /combo_cards:
    get:
      description: List all combo cards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ComboCard'
            type: array
      summary: List all combo cards
      tags:
      - ComboCards
    post:
      consumes:
      - application/json
      description: Create a new combo card
      parameters:
      - description: Combo Card
        in: body
        name: comboCard
        required: true
        schema:
          $ref: '#/definitions/combo_cards.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ComboCard'
      summary: Create a new combo card
      tags:
      - ComboCards
  /combo_cards/{id}:
    delete:
      description: Delete a combo card
      parameters:
      - description: Combo Card ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a combo card
      tags:
      - ComboCards
    get:
      description: Get a combo card by ID
      parameters:
      - description: Combo Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ComboCard'
      summary: Get a combo card by ID
      tags:
      - ComboCards
    put:
      consumes:
      - application/json
      description: Update a combo card
      parameters:
      - description: Combo Card ID
        in: path
        name: id
        required: true
        type: string
      - description: Combo Card
        in: body
        name: comboCard
        required: true
        schema:
          $ref: '#/definitions/combo_cards.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ComboCard'
      summary: Update a combo card
      tags:
      - ComboCards
  /damage_combo_cards:
    get:
      description: List all damage combo cards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DamageComboCard'
            type: array
      summary: List all damage combo cards
      tags:
      - DamageComboCards
    post:
      consumes:
      - application/json
      description: Create a new damage combo card
      parameters:
      - description: Damage Combo Card
        in: body
        name: damageComboCard
        required: true
        schema:
          $ref: '#/definitions/damage_combo_cards.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DamageComboCard'
      summary: Create a new damage combo card
      tags:
      - DamageComboCards
  /damage_combo_cards/{id}:
    delete:
      description: Delete a damage combo card
      parameters:
      - description: Damage Combo Card ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a damage combo card
      tags:
      - DamageComboCards
    get:
      description: Get a damage combo card by ID
      parameters:
      - description: Damage Combo Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DamageComboCard'
      summary: Get a damage combo card by ID
      tags:
      - DamageComboCards
    put:
      consumes:
      - application/json
      description: Update a damage combo card
      parameters:
      - description: Damage Combo Card ID
        in: path
        name: id
        required: true
        type: string
      - description: Damage Combo Card
        in: body
        name: damageComboCard
        required: true
        schema:
          $ref: '#/definitions/damage_combo_cards.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DamageComboCard'
      summary: Update a damage combo card
      tags:
      - DamageComboCards
  /enemies:
    get:
      description: List all enemies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Enemy'
            type: array
      summary: List all enemies
      tags:
      - Enemies
    post:
      consumes:
      - application/json
      description: Create a new enemy with enemy moves
      parameters:
      - description: Enemy
        in: body
        name: enemy
        required: true
        schema:
          $ref: '#/definitions/enemies.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Enemy'
      summary: Create a new enemy
      tags:
      - Enemies
  /enemies/{id}:
    delete:
      description: Delete an enemy by ID
      parameters:
      - description: Enemy ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an enemy by ID
      tags:
      - Enemies
    get:
      description: Get an enemy by ID
      parameters:
      - description: Enemy ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Enemy'
      summary: Get an enemy by ID
      tags:
      - Enemies
    put:
      consumes:
      - application/json
      description: Update an existing enemy
      parameters:
      - description: Enemy ID
        in: path
        name: id
        required: true
        type: string
      - description: Enemy
        in: body
        name: enemy
        required: true
        schema:
          $ref: '#/definitions/enemies.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Enemy'
      summary: Update an existing enemy
      tags:
      - Enemies
  /enemy_moves:
    get:
      description: List all enemy moves, optionally filtered by EnemyID
      parameters:
      - description: Enemy ID
        in: query
        name: EnemyID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EnemyMove'
            type: array
      summary: List all enemy moves
      tags:
      - EnemyMoves
  /enemy_moves/{enemyId}:
    post:
      consumes:
      - application/json
      description: Create a new enemy move
      parameters:
      - description: Enemy ID
        in: path
        name: enemyId
        required: true
        type: string
      - description: EnemyMove
        in: body
        name: enemyMove
        required: true
        schema:
          $ref: '#/definitions/enemy_moves.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnemyMove'
      summary: Create a new enemy move
      tags:
      - EnemyMoves
  /enemy_moves/{id}:
    delete:
      description: Delete an enemy move by ID
      parameters:
      - description: EnemyMove ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an enemy move by ID
      tags:
      - EnemyMoves
    get:
      description: Get an enemy move by ID
      parameters:
      - description: EnemyMove ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnemyMove'
      summary: Get an enemy move by ID
      tags:
      - EnemyMoves
    put:
      consumes:
      - application/json
      description: Update an existing enemy move
      parameters:
      - description: EnemyMove ID
        in: path
        name: id
        required: true
        type: string
      - description: EnemyMove
        in: body
        name: enemyMove
        required: true
        schema:
          $ref: '#/definitions/enemy_moves.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnemyMove'
      summary: Update an existing enemy move
      tags:
      - EnemyMoves
  /locations:
    get:
      description: List all locations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Location'
            type: array
      summary: List all locations
      tags:
      - Locations
    post:
      consumes:
      - application/json
      description: Create a new location
      parameters:
      - description: Location
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/locations.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Location'
      summary: Create a new location
      tags:
      - Locations
  /locations/{id}:
    delete:
      description: Delete a location by ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a location by ID
      tags:
      - Locations
    get:
      description: Get a location by ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Location'
      summary: Get a location by ID
      tags:
      - Locations
    put:
      consumes:
      - application/json
      description: Update a location
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      - description: Location
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/locations.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Location'
      summary: Update a location
      tags:
      - Locations
  /special_effects:
    get:
      description: List all special effects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpecialEffect'
            type: array
      summary: List all special effects
      tags:
      - SpecialEffects
    post:
      consumes:
      - application/json
      description: Create a new special effect
      parameters:
      - description: Special Effect
        in: body
        name: specialEffect
        required: true
        schema:
          $ref: '#/definitions/special_effects.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SpecialEffect'
      summary: Create a new special effect
      tags:
      - SpecialEffects
  /special_effects/{id}:
    delete:
      description: Delete a special effect
      parameters:
      - description: Special Effect ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a special effect
      tags:
      - SpecialEffects
    get:
      description: Get a special effect by ID
      parameters:
      - description: Special Effect ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SpecialEffect'
      summary: Get a special effect by ID
      tags:
      - SpecialEffects
    put:
      consumes:
      - application/json
      description: Update a special effect
      parameters:
      - description: Special Effect ID
        in: path
        name: id
        required: true
        type: string
      - description: Special Effect
        in: body
        name: specialEffect
        required: true
        schema:
          $ref: '#/definitions/special_effects.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SpecialEffect'
      summary: Update a special effect
      tags:
      - SpecialEffects
  /weapon_combos:
    get:
      description: List all weapon combos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.WeaponCombo'
            type: array
      summary: List all weapon combos
      tags:
      - WeaponCombos
    post:
      consumes:
      - application/json
      description: Create a new weapon combo
      parameters:
      - description: WeaponCombo
        in: body
        name: weaponCombo
        required: true
        schema:
          $ref: '#/definitions/weapon_combos.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.WeaponCombo'
      summary: Create a new weapon combo
      tags:
      - WeaponCombos
  /weapon_combos/{id}:
    delete:
      description: Delete a weapon combo by ID
      parameters:
      - description: WeaponCombo ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a weapon combo by ID
      tags:
      - WeaponCombos
    get:
      description: Get a weapon combo by ID
      parameters:
      - description: WeaponCombo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.WeaponCombo'
      summary: Get a weapon combo by ID
      tags:
      - WeaponCombos
    put:
      consumes:
      - application/json
      description: Update a weapon combo
      parameters:
      - description: WeaponCombo ID
        in: path
        name: id
        required: true
        type: string
      - description: WeaponCombo
        in: body
        name: weaponCombo
        required: true
        schema:
          $ref: '#/definitions/weapon_combos.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.WeaponCombo'
      summary: Update a weapon combo
      tags:
      - WeaponCombos
  /weapons:
    get:
      description: List all weapons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Weapon'
            type: array
      summary: List all weapons
      tags:
      - Weapons
    post:
      consumes:
      - application/json
      description: Create a new weapon along with its combos
      parameters:
      - description: Weapon
        in: body
        name: weapon
        required: true
        schema:
          $ref: '#/definitions/weapons.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Weapon'
      summary: Create a new weapon
      tags:
      - Weapons
  /weapons/{id}:
    delete:
      description: Delete a weapon by ID
      parameters:
      - description: Weapon ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a weapon by ID
      tags:
      - Weapons
    get:
      description: Get a weapon by ID
      parameters:
      - description: Weapon ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Weapon'
      summary: Get a weapon by ID
      tags:
      - Weapons
    put:
      consumes:
      - application/json
      description: Update a weapon
      parameters:
      - description: Weapon ID
        in: path
        name: id
        required: true
        type: string
      - description: Weapon
        in: body
        name: weapon
        required: true
        schema:
          $ref: '#/definitions/weapons.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Weapon'
      summary: Update a weapon
      tags:
      - Weapons
swagger: "2.0"
